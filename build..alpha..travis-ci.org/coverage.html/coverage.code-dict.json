{"/home/travis/build/npmtest/node-npmtest-t/test.js":"/* istanbul instrument in package npmtest_t */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-t/lib.npmtest_t.js":"/* istanbul instrument in package npmtest_t */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_t = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_t = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-t/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-t && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_t */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_t\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_t.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_t.rollup.js'] =\n            local.assetsDict['/assets.npmtest_t.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_t.__dirname + '/lib.npmtest_t.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-t/node_modules/t/t.js":"// version 0.5.1 ([source](https://github.com/aaronj1335/t-js))\n//\n// t-js is freely distributable under the MIT license\n//\n// <a href=\"https://travis-ci.org/aaronj1335/t-js\" target=_blank>\n//   <img src=\"https://api.travis-ci.org/aaronj1335/t-js.png?branch=master\">\n// </a>\n//\n\n// overview\n// ========\n// t.js is a tree-traversal library.  its only assumption is that the trees it\n// traverses are made up of objects with 'children' arrays:\n//\n//      {\n//          children: [\n//              { },\n//              {\n//                  children: [\n//                      { },\n//                      { }\n//                  ]\n//              }\n//          ]\n//      }\n//\n//  the actual property name is configurable. the traversals are entirely\n//  non-recursive, including the post-order traversal and `map()` functions,\n//  and it works inside the browser or out.\n//\n// testing\n// -------\n// there's a bunch of tests in `test/test.js`. you can run them along with the\n// linter with:\n//\n//     $ npm install && npm test\n//\n// or view them on most any system with a modern browser by opening the\n// `index.html` file.\n//\n// documentation is generated with the `grunt docs` target.\n//\n(function() {\n\n\n// usage\n// -----\n// the `t` interface is exported in either the browser or node.js. the library\n// can be installed from [npm](http://search.npmjs.org/#/t):\n//\n//     $ npm install t\n//\nvar _dfsPostOrder,\n    t = {},\n    root = this,\n    isArray = function(o) {\n        return Object.prototype.toString.call(o) === '[object Array]';\n    },\n    getChildrenName = function (config) {\n        return config.childrenName || 'children';\n    };\n\nif (typeof exports !== 'undefined') {\n    if (typeof module !== 'undefined' && module.exports)\n        exports = module.exports = t;\n    exports.t = t;\n} else {\n    root.t = t;\n}\n\n\n// available functions\n// ===================\n\n// t.bfs()\n// -------\n// perform a breadth-first search, executing the given callback at each node.\n//\n//      t.bfs(node, [config], function(node, par, ctrl) {\n//          /* ... */\n//      })\n//\n// - `node`:\n//      object where the search will start.  this could also be an array of\n//      objects\n// - `config`:\n//      you can define the name of the children property with\n//      `config.childrenName` (shoutout to @GianlucaGuarini)\n// - `callback` (last argument):\n//      function to be executed at each node.  the arguments are:\n//      - `node`: the current node\n//      - `par`: the current node's parent\n//      - `ctrl`: control object.  this doesn't currently do anything.\n//\n//  returns: the first `node` argument\n//\nt.bfs = function(node) {\n\n    var cur, callback, i, length, par, children,\n        isConfigSet = arguments.length === 3,\n        config = isConfigSet ? arguments[1] : {},\n        queue = isArray(node)? node.slice(0) : [node],\n        parents = [undefined],\n        childrenName = getChildrenName(config);\n\n    if (node == null) return node;\n\n    if (arguments.length >= 3) {\n        config = arguments[1];\n        callback = arguments[2];\n    } else {\n        config = {};\n        callback = arguments[1];\n    }\n\n    while (queue.length) {\n        cur = queue.shift();\n        par = parents.shift();\n        callback.call(cur, cur, par);\n        children = cur[childrenName] || [];\n        for (i = 0, length = children.length; i < length; i++) {\n            queue.push(children[i]);\n            parents.push(cur);\n        }\n    }\n\n    return node;\n};\n\n// t.dfs()\n// -------\n// perform a depth-first search, executing the given callback at each node.\n//\n//      t.dfs(node, [config], function(node, par, ctrl) {\n//          /* ... */\n//      })\n//\n//  in the pre-order case, `dfs()` doesn't process child nodes until after the\n//  callback.  so if you need to traverse an unknown tree, say a directory\n//  structure, you can start with just the root, and add child nodes as you go\n//  by appending them to `this.children` in the callback function.\n//\n// - `node`:\n//      object where the search will start.  this could also be an array of\n//      objects\n// - `config`:\n//      if this is an object w/ the 'order' property set to 'post', a\n//      post-order traversal will be performed.  this is generally worse\n//      performance, but the `callback` has access to the return values of its\n//      child nodes. you can define the name of the children property with\n//      `config.childrenName`\n// - `callback` (last argument):\n//      function to be executed at each node.  the arguments are:\n//      - `node`: the current node\n//      - `par`: the current node's parent\n//      - `ctrl`: control object.  setting the `stop` property of this will end\n//      the search, setting the `cutoff` property of this will not visit any\n//      children of this node\n//      - `ret`: return values of child nodes.  this is only set if `dfs()` is\n//      called with the `order` property set to `post`.\n//\n//  returns: the first `node` argument\n//\nt.dfs = function(node) {\n    var cur, par, children, ctrl, i, ret,\n        isConfigSet = arguments.length === 3,\n        nodes = isArray(node)? node.slice(0).reverse() : [node],\n        config = isConfigSet ? arguments[1] : {},\n        callback = arguments[isConfigSet ? 2 : 1],\n        parents = [],\n        childrenName = getChildrenName(config);\n    if (typeof nodes[0] === 'undefined' && nodes.length === 1) return;\n\n    if (config.order === 'post') {\n        ret = _dfsPostOrder(nodes, config, callback);\n        return isArray(node)? ret : ret[0];\n    }\n\n\n    for (i = nodes.length-1; i >= 0; i--)\n        parents.push(undefined);\n\n    while (nodes.length > 0) {\n        cur = nodes.pop();\n        par = parents.pop();\n\n        ctrl = {};\n        callback.call(cur, cur, par, ctrl);\n\n        if (ctrl.stop) break;\n\n        children = (cur && cur[childrenName])? cur[childrenName] : [];\n\n        for (i = ctrl.cutoff? -1 : children.length-1; i >= 0; i--) {\n            nodes.push(children[i]);\n            parents.push(cur);\n        }\n    }\n\n    return node;\n};\n\n// t.map()\n// -------\n// given a tree, return a tree of the same structure made up of the objects\n// returned by the callback which is executed at each node.  think of the\n// `underscore`'s `_.map()` function, or python's `map()`\n//\n//      t.map(node, [config], function(node, par) {\n//          /* ... */\n//      })\n//\n// - `node`:\n//      object where the traversal will start.  this could also be an array of\n//      objects\n// - `config`:\n//      you can define the name of the children property with\n//      `config.childrenName`\n// - `callback` (last argument):\n//      function to be executed at each node.  this must return an object.  the\n//      `map` function takes care of setting children.  the arguments are:\n//      - `node`: the current node\n//      - `par`: the current node's parent. note that this is the parent from\n//      the new tree that's being created.\n//\n//  returns: a new tree, mapped by the callback function\n//\nt.map = function() {\n    var node = arguments[0],\n        isConfigSet = arguments.length === 3,\n        config = isConfigSet ? arguments[1] : {},\n        filter = config.filter,\n        nodeFactory = arguments[isConfigSet ? 2 : 1],\n        ret = isArray(node)? [] : undefined,\n        last = function(l) { return l[l.length-1]; },\n        parentStack = [],\n        childrenName = getChildrenName(config);\n\n    t.dfs(node, config, function(n, par, ctrl) {\n        var curParent = last(parentStack),\n            newNode = nodeFactory(n, curParent? curParent.ret : undefined);\n\n        if (filter && ! newNode) {\n            ctrl.cutoff = true;\n            if (curParent && n === last(curParent.n[childrenName])) {\n                parentStack.pop();\n                if (curParent.ret[childrenName] &&\n                        ! curParent.ret[childrenName].length)\n                    delete curParent.ret[childrenName];\n            }\n            return;\n        }\n\n        if (! par) {\n            if (isArray(node))\n                ret.push(newNode);\n            else\n                ret = newNode;\n\n        } else {\n            curParent.ret[childrenName].push(newNode);\n\n            if (n === last(curParent.n[childrenName])) {\n                parentStack.pop();\n                if (curParent.ret[childrenName] &&\n                        ! curParent.ret[childrenName].length)\n                    delete curParent.ret[childrenName];\n            }\n        }\n\n        if (n[childrenName] && n[childrenName].length) {\n            newNode[childrenName] = [];\n            parentStack.push({n: n, ret: newNode});\n        }\n    });\n\n    return ret;\n};\n\n// t.filter()\n// ----------\n// given a tree, return a tree of the same structure made up of the objects\n// returned by the callback which is executed at each node.  if, however, at a\n// given node the callback returns a falsy value, then the current node and all\n// of its descendents will be pruned from the output tree.\n//\n//      t.filter(node, [config], function(node, par) {\n//          /* ... */\n//      })\n//\n// - `node`:\n//      object where the traversal will start.  this could also be an array of\n//      objects\n// - `config`:\n//      you can define the name of the children property with\n//      `config.childrenName`\n// - `callback` (last argument):\n//      function to be executed at each node.  this must return an object or a\n//      falsy value if the output tree should be pruned from the current node\n//      down.  the `filter` function takes care of setting children.  the\n//      arguments are:\n//      - `node`: the current node\n//      - `par`: the current node's parent. note that this is the parent from\n//      the new tree that's being created.\n//\n// returns: a new tree, filtered by the callback function\n//\nt.filter = function(node) {\n    var isConfigSet = arguments.length === 3,\n        nodeFactory =  arguments[isConfigSet ? 2 : 1],\n        config = isConfigSet ? arguments[1] : {};\n    return t.map(node, {\n        filter: true,\n        childrenName: config.childrenName\n    }, nodeFactory);\n};\n\n// t.stroll()\n// ----------\n//\n// _a walk through the trees..._\n//\n// given two trees of similar structure, traverse both trees at the same time,\n// executing the given callback with the pair of corresponding nodes as\n// arguments.\n//\n//      t.stroll(tree1, tree2, [config], function(node1, node2) {\n//          /* ... */\n//      })\n//\n// - `tree1`:\n//      the first tree of the traversal\n// - `node2`:\n//      the second tree of the traversal\n// - `config`:\n//      you can define the name of the children property with\n//      `config.childrenName`\n// - `callback` (last argument):\n//      function to be executed at each node. the arguments are:\n//      - `node1`: the node from the first tree\n//      - `node2`: the node from the second tree\n//\nt.stroll = function(tree1, tree2) {\n    var i, node2,\n        isConfigSet = arguments.length === 4,\n        callback =  arguments[ isConfigSet ? 3 : 2],\n        config = isConfigSet ? arguments[2] : {},\n        childrenName = getChildrenName(config),\n        nodes2 = isArray(tree2)? tree2.slice(0).reverse() : [tree2],\n        len = function(a) { return typeof a === 'undefined'? 0 : a.length; };\n\n    t.dfs(tree1, config, function(node1, par, ctrl) {\n        node2 = nodes2.pop();\n\n        callback(node1, node2);\n\n        if (node1 && node2 &&\n                len(node1[childrenName]) === len(node2[childrenName]))\n            for (i = (node2[childrenName] || []).length-1; i >= 0; i--)\n                nodes2.push(node2[childrenName][i]);\n        else\n            ctrl.cutoff = true;\n\n    });\n};\n\n// t.find()\n// ----------\n//\n// given a tree and a truth test, return the first node that responds with a\n// truthy value\n//\n//      t.find(tree, [config], function(node, par) {\n//          /* ... */\n//      })\n//\n// - `tree`:\n//      the tree in which to find the node\n// - `config`:\n//      you can define the name of the children property with\n//      `config.childrenName`\n// - `callback` (last argument):\n//      function to be executed at each node. if this function returns a truthy\n//      value, the traversal will stop and `find` will return the current node.\n//      the arguments are:\n//      - `node`: the current node\n//      - `par`: the parent of the current node\n//\n// returns: the found node\n//\nt.find = function( tree ) {\n    var found,\n        isConfigSet = arguments.length === 3,\n        callback =  arguments[ isConfigSet ? 2 : 1],\n        config = isConfigSet ? arguments[1] : {};\n    t.dfs(tree, config, function(node, par, ctrl) {\n        if (callback.call(node, node, par)) {\n            ctrl.stop = true;\n            found = this;\n        }\n    });\n\n    return found;\n};\n\n// _dfsPostOrder()\n// -----------------\n//\n// this is a module-private function used by `dfs()`\n_dfsPostOrder = function(nodes, config, callback) {\n    var cur, par, ctrl, node,\n        last = function(l) { return l[l.length-1]; },\n        ret = [],\n        stack = [{\n            node: nodes.pop(),\n            index: 0,\n            ret: []\n        }],\n        childrenName = getChildrenName(config);\n\n    while (stack.length) {\n        cur = last(stack);\n        node = cur.node;\n\n        if (node[childrenName] && node[childrenName].length) {\n            if (cur.index < node[childrenName].length) {\n                stack.push({\n                    node: node[childrenName][cur.index++],\n                    index: 0,\n                    ret: []\n                });\n                continue;\n            }\n        }\n\n        ctrl = {};\n        par = stack[stack.length-2];\n        if (par) {\n            par.ret.push(callback.call(node, node, par.node, ctrl, cur.ret));\n            stack.pop();\n        } else {\n            ret.push(callback.call(node, node, undefined, ctrl, cur.ret));\n            stack.pop();\n            if (nodes.length)\n                stack.push({\n                    node: nodes.pop(),\n                    index: 0,\n                    ret: []\n                });\n        }\n    }\n\n    return ret;\n};\n\n}());\n"}